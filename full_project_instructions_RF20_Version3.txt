üéØ Objectif global :
--------------------
Cr√©er un mod√®le de paris sportifs sur le tennis permettant de g√©n√©rer un b√©n√©fice net d‚Äôenviron 500‚Ç¨/mois,
avec des mises fixes de 20‚Ç¨ par pari.

üìä Historique de la d√©marche :
------------------------------
1. Des fichiers historiques de matchs ATP/WTA 2024 ont √©t√© fournis avec les cotes des bookmakers.
   - `matchs_atp.csv` (anciennement 2024.xlsx)
   - `matchs_wta.csv` (anciennement 2024 (1).xlsx)

2. Des fichiers CSV contenant les statistiques globales des joueurs (issues de TennisAbstract) ont √©t√© fournis :
   - `stats_atp.csv` : stats agr√©g√©es pour les joueurs ATP
   - `stats_wta.csv` : stats agr√©g√©es pour les joueuses WTA

3. Un mod√®le de machine learning RandomForest a √©t√© entra√Æn√© √† partir des √©carts statistiques entre les deux joueurs pour chaque match.

üìå Nom de la strat√©gie retenue : **StatsValue_RF20**

üì¶ Fichiers utilis√©s pour entra√Æner le mod√®le :
----------------------------------------------
- `matchs_atp.csv` : r√©sultats ATP 2024 avec cotes
- `matchs_wta.csv` : r√©sultats WTA 2024 avec cotes
- `stats_atp.csv` : stats ATP globales par joueur
- `stats_wta.csv` : stats WTA globales par joueuse

üß† Fonctionnement du mod√®le :
-----------------------------
1. Pour chaque match, on calcule les **diff√©rences statistiques** entre le joueur 1 et le joueur 2 :
   - ex : `diff_ace% = joueur1["Ace%"] - joueur2["Ace%"]`
   - D‚Äôautres features incluent 1st%, 2nd%, Hold%, etc.

2. Le mod√®le RandomForest est entra√Æn√© pour **pr√©dire la probabilit√© de victoire** du joueur 1
   √† partir de ces √©carts statistiques.

3. Les cotes r√©elles sont utilis√©es pour calculer la **probabilit√© implicite du bookmaker**.

4. On d√©tecte un **value bet** si :
   - `proba_mod√®le - proba_bookmaker > 0.10` (donc value > 10%)
   - ET `cote ‚â• 1.80` (pour garantir un gain significatif)

5. Une mise **fixe de 20‚Ç¨** est utilis√©e par pari.

üìà Performance observ√©e :
-------------------------
- Nombre de paris simul√©s : 249
- ROI : +108%
- Gain mensuel simul√© : ~+449‚Ç¨

üíæ G√©n√©ration du mod√®le (fichier `statsvalue_rf20_model.pkl`) :
---------------------------------------------------------------
1. Fusionner les fichiers `matchs_atp.csv` + `stats_atp.csv` (et idem WTA).
2. Pour chaque match, r√©cup√©rer les stats de chaque joueur √† partir des fichiers stats.
3. Calculer les `diff_ace%`, `diff_1st%`, etc. pour construire les features.
4. Entra√Æner un `RandomForestClassifier` avec les features comme X et le r√©sultat (player1 win) comme y.
5. Sauvegarder le mod√®le avec `joblib.dump(model, 'statsvalue_rf20_model.pkl')`.

‚öôÔ∏è Int√©gration automatis√©e (script `daily_run.py`) :
-----------------------------------------------------
- Chargement du mod√®le `statsvalue_rf20_model.pkl`
- R√©cup√©ration des matchs du jour via API-Tennis (get_today_matches.py)
- R√©cup√©ration des cotes via The Odds API (get_tennis_odds.py)
- R√©cup√©ration des stats globales via `stats_atp.csv` / `stats_wta.csv`
- Construction des features et pr√©dictions
- Filtrage des paris selon value > 10% et cote ‚â• 1.80
- Envoi des paris retenus via Telegram (`send_telegram.py`)

üîë APIs utilis√©es :
-------------------
- **API-Tennis.com** : pour r√©cup√©rer les matchs du jour (fixtures)
- **The Odds API** : pour r√©cup√©rer les cotes r√©elles
- **Telegram Bot API** : pour recevoir automatiquement les paris s√©lectionn√©s